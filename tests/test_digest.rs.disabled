//#! Testing my hashing skills
// input from

#[cfg(test)]
pub mod test {

    use saml_rs::sign::DigestAlgorithm;
    use saml_rs::utils::to_hex_string;
    use hex::FromHex;
    
    /// compare two vectors by iterating through them one by one
    fn compare_vecs(veca: Vec<u8>, vecb: Vec<u8>) {
        let maxlen = match veca.len() >= vecb.len() {
            true => vecb.len(),
            false => veca.len()
        };
        let mut i = 0;
        for (a,b) in veca.iter().zip(vecb.iter()) {
            println!("{} => {}",a ,b);
            i += 1;
            if i == maxlen {
                break;
            }
        }
    }

    #[test]
    /// Tests that we're doing digests the same as the reference examples here: <https://www.di-mgt.com.au/xmldsig2.html#twotypes>
    fn test_hash_digest() {
        println!("Starting up test_hash_digest");
        /*
        The SHA-1 digest of this data is (0x)516b984d8ba0d7427593984a7e89f1b6182b011f or UWuYTYug10J1k5hKfonxthgrAR8= in base64.
        */

        let expected_result_hexes = "3c456e76656c6f706520786d6c6e733d22687474703a2f2f6578616d706c652e6f72672f656e76656c6f7065223e0a20203c426f64793e0a202020204f6cc3a1206d756e646f0a20203c2f426f64793e0a20200a3c2f456e76656c6f70653e";
        let fromhex = Vec::from_hex("516b984d8ba0d7427593984a7e89f1b6182b011f").unwrap();
        let digest_from_example_base64 = "UWuYTYug10J1k5hKfonxthgrAR8=";
        let test_envelope = "<Envelope xmlns=\"http://example.org/envelope\">\n  <Body>\n    Olá mundo\n  </Body>\n  \n</Envelope>";

        let result_hexes = to_hex_string(test_envelope.as_bytes().to_vec(), Some(""));
        println!("test_envelope raw:\n{:?}", test_envelope);
        println!("test_envelope as bytes: {:?}", test_envelope.as_bytes());
        println!("test_envelope as hexes: {:?}", result_hexes);

        println!("expected_rslt as hexes: {:?}", expected_result_hexes);
        println!("Matches? {:?}", result_hexes == expected_result_hexes);

        let result = DigestAlgorithm::Sha1
            .hash(test_envelope.as_bytes())
            .unwrap();
        let base64_bytes = base64::encode(result);

        let digest_from_example_bytes = base64::decode(&digest_from_example_base64).unwrap();

        eprintln!();
        eprintln!("digest_from_example_base64: {}", digest_from_example_base64);
        eprintln!(
            "digest_from_example_bytes: {:?}",
            &digest_from_example_bytes
        );
        eprintln!(
            "digest_from_example_bytes: {:?}",
            to_hex_string(digest_from_example_bytes, Some("")).to_lowercase()
        );
        // eprintln!("digest_from_example_bytes: {:#X}", u128::from_be_bytes(&digest_from_example_bytes[..]));
        // eprintln!("digest_from_example_bytes: {}", digest_from_example_bytes);

    
        eprintln!("\ndigest bytes: {:?}", &result[..]);
        eprintln!("should match: {:?}", &fromhex);
        eprintln!("matches: {:?}", result[..] == fromhex);
        assert_eq!(result[..], fromhex);

        eprintln!("\nbase64 bytes: {}", base64_bytes);
        eprintln!("should match: {}", digest_from_example_base64);
        eprintln!(
            "matches: {:?}",
            base64_bytes == digest_from_example_base64
        );
        assert_eq!(base64_bytes, digest_from_example_base64);
        eprintln!("Test passed!");
    }
    
    #[test]
    fn test_second_hash_digest() {
        println!("Starting up test_second_hash_digest");
        /*
        The SHA-1 digest of this data is (0x)516b984d8ba0d7427593984a7e89f1b6182b011f or UWuYTYug10J1k5hKfonxthgrAR8= in base64.
        */

        let digest_from_example_base64 = "yxUMzxxXc/ERdoMKh8seAFyWGIE=";
        let fromhex = Vec::from_hex("cb150ccf1c5773f11176830a87cb1e005c961881").unwrap();
        let test_envelope = "<MsgHead xmlns=\"http://www.example.com/msghead\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.example.com/msghead MsgHead.xsd\">
  <MsgInfo>
    <Type DN=\"Resept\" V=\"ERM1\"></Type>
    <Patient>
       <FamilyName>Nordmann</FamilyName>
       <GivenName>Ola</GivenName>
        <Ident>
          <Id>12345678901</Id>
          <TypeId DN=\"Fødselsnummer\" S=\"2.16.123.1.10.4.1.1.9999\" V=\"FNR\"></TypeId>
        </Ident>
      </Patient>
    </MsgInfo>
  <Document>
    <RefDoc>foo bar</RefDoc>
  </Document>

</MsgHead>";

        let result_hexes = to_hex_string(test_envelope.as_bytes().to_vec(), Some(""));
        println!("test_envelope raw:\n{:?}", test_envelope);
        println!("test_envelope as bytes: {:?}", test_envelope.as_bytes());
        println!("test_envelope as hexes: {:?}", result_hexes);

        let expected_result_hexes = "3c4d73674865616420786d6c6e733d22687474703a2f2f7777772e6578616d706c652e636f6d2f6d7367686561642220786d6c6e733a7873643d22687474703a2f2f7777772e77332e6f72672f323030312f584d4c536368656d612e7873642220786d6c6e733a7873693d22687474703a2f2f7777772e77332e6f72672f323030312f584d4c536368656d612d696e7374616e636522207873693a736368656d614c6f636174696f6e3d22687474703a2f2f7777772e6578616d706c652e636f6d2f6d736768656164204d7367486561642e787364223e0a20203c4d7367496e666f3e0a202020203c5479706520444e3d225265736570742220563d2245524d31223e3c2f547970653e0a202020203c50617469656e743e0a2020202020203c46616d696c794e616d653e4e6f72646d616e6e3c2f46616d696c794e616d653e0a2020202020203c476976656e4e616d653e4f6c613c2f476976656e4e616d653e0a2020202020203c4964656e743e0a20202020202020203c49643e31323334353637383930313c2f49643e0a20202020202020203c54797065496420444e3d2246c3b86473656c736e756d6d65722220533d22322e31362e3132332e312e31302e342e312e312e393939392220563d22464e52223e3c2f5479706549643e0a2020202020203c2f4964656e743e0a202020203c2f50617469656e743e0a20203c2f4d7367496e666f3e0a20203c446f63756d656e743e0a202020203c526566446f633e666f6f206261723c2f526566446f633e0a20203c2f446f63756d656e743e0a0a3c2f4d7367486561643e";
        
        // compare_vecs(expected_result.to_vec(), test_envelope);
        println!("expected_rslt as hexes: {:?}", expected_result_hexes);
        println!("Matches? {:?}", result_hexes == expected_result_hexes);

        let result = DigestAlgorithm::Sha1
            .hash(test_envelope.as_bytes())
            .unwrap();
        let base64_bytes = base64::encode(result);

        
        let digest_from_example_bytes = base64::decode(&digest_from_example_base64).unwrap();

        eprintln!();
        eprintln!("digest_from_example_base64: {}", digest_from_example_base64);
        eprintln!(
            "digest_from_example_bytes: {:?}",
            &digest_from_example_bytes
        );
        eprintln!(
            "digest_from_example_bytes: {:?}",
            to_hex_string(digest_from_example_bytes, Some("")).to_lowercase()
        );
        // eprintln!("digest_from_example_bytes: {:#X}", u128::from_be_bytes(&digest_from_example_bytes[..]));
        // eprintln!("digest_from_example_bytes: {}", digest_from_example_bytes);

        eprintln!("\ndigest bytes: {:?}", &result[..]);
        eprintln!("should match: {:?}", &fromhex);
        eprintln!("matches: {:?}", result[..] == fromhex);
        // assert_eq!(result[..], fromhex);

        eprintln!("\nbase64 bytes: {}", base64_bytes);
        eprintln!("should match: {}", digest_from_example_base64);
        eprintln!(
            "matches: {:?}",
            base64_bytes == digest_from_example_base64
        );
        assert_eq!(base64_bytes, digest_from_example_base64);
    }
}

/*
Compose the canonicalized SignedInfo element and compute its SignatureValue

The canonicalized version of the SignedInfo element is as follows, with newlines shown as  and leading spaces shown as  :

<SignedInfo xmlns="http://www.w3.org/2000/09/xmldsig#">
      <CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315"></CanonicalizationMethod>
      <SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"></SignatureMethod>
      <Reference URI="">
        <Transforms>
          <Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"></Transform>
        </Transforms>
        <DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"></DigestMethod>
        <DigestValue>UWuYTYug10J1k5hKfonxthgrAR8=</DigestValue>
      </Reference>
    </SignedInfo>

These 626 bytes are shown in this hexdump. Note that:

    The first character is "<" and the last character is ">".
    All leading space characters inbetween (shown as  ) are retained.
    Empty elements of the form <tag /> are changed to the form <tag></tag>
    Line-endings are converted to the LF character (0x0A).
    The namespace xmlns="http://www.w3.org/2000/09/xmldsig#" is propagated down from the parent Signature element. This "over-rules" the default namespace from the Envelope element.

The SHA-1 digest of this is (0x)a25a06d339d68b625cd7383a932357889956a54e or oloG0znWi2Jc1zg6kyNXiJlWpU4= in base64, and the SignatureValue computed using Alice's RSA key is

TSQUoVrQ0kg1eiltNwIhKPrIdsi1VhWjYNJlXvfQqW2EKk3X37X862SCfrz7v8IYJ7OorWwlFpGDStJDSR6saO
ScqSvmesCrGEEq+U6zegR9nH0lvcGZ8Rvc/y7U9kZrE4fHqEiLyfpmzJyPmWUT9Uta14nPJYsl3cmdThHB8Bs=
*/

//   let test_string = String::from(r#"<SignedInfo xmlns="http://www.w3.org/2000/09/xmldsig#">
//   <CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315"></CanonicalizationMethod>
//   <SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"></SignatureMethod>
//   <Reference URI="">
//     <Transforms>
//       <Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"></Transform>
//     </Transforms>
//     <DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"></DigestMethod>
//     <DigestValue>UWuYTYug10J1k5hKfonxthgrAR8=</DigestValue>
//   </Reference>
// </SignedInfo>"#);

//   println!("{}", test_string);

//     println!("Done!");
// }
